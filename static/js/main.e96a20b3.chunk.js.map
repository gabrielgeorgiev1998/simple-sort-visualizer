{"version":3,"sources":["images/sortIcon.svg","images/sortAlgMenu.svg","images/genNewArrIcon.svg","sort-algorithms/helpers/swap.js","sort-algorithms/gnome-sort.js","sort-algorithms/quick-sort.js","sort-algorithms/heap-sort.js","sort-algorithms/odd-even-sort.js","App.js","sort-algorithms/bubble-sort.js","serviceWorker.js","index.js"],"names":["module","exports","swap","array","i","j","tmp","gnomeSortHelper","arr","upperBound","toAnimate","animation","toCompareFirst","toCompareSecond","toSwap","push","quickSortMain","left","right","index","length","pivotIndex","Math","floor","pivot","quickSortPartition","heapify","size","largest","heapSortAlg","slice","heapSort","oddEvenSortAlg","sorted","oddEvenSort","randomArray","random","App","useState","sortAlg","setSortAlg","setSize","setArray","sortSpeed","setSortSpeed","currSorting","setCurrSorting","isSorted","setIsSorted","hoveredSize","setHoveredSize","hoveredAlg","setHoveredAlg","animate","animations","arrayBars","document","getElementsByClassName","setTimeout","style","backgroundColor","height","handleSortPress","alert","bubbleSortAlg","quickSortAlg","gnomeSortAlg","className","pointerEvents","href","onMouseEnter","onMouseLeave","type","onChange","event","sizeValue","target","value","min","max","src","sortAlgMenu","alt","onClick","sortIcon","map","number","key","width","genNewArrIcon","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e96a20b3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sortIcon.fc574009.svg\";","module.exports = __webpack_public_path__ + \"static/media/sortAlgMenu.873ca344.svg\";","module.exports = __webpack_public_path__ + \"static/media/genNewArrIcon.8797e476.svg\";","export default function swap(array, i, j) {\r\n    let tmp = array[i];\r\n    array[i] = array[j];\r\n    array[j] = tmp;\r\n}","import swap from './helpers/swap';\r\n\r\nfunction gnomeSortHelper(arr, upperBound, toAnimate) {\r\n    var i = upperBound;\r\n    while(i>0 && arr[i-1] > arr[i]) {\r\n        var animation = {toCompareFirst: i, toCompareSecond: i-1, toSwap: true};\r\n        toAnimate.push(animation);\r\n        swap(arr, i, i-1);\r\n        i = i-1;\r\n    }\r\n}\r\n\r\nexport default function gnomeSortAlg(array) {\r\n    var arr = array.slice();\r\n    var toAnimate = [];\r\n    for(let i=1;i<arr.length;i++) {\r\n        gnomeSortHelper(arr, i, toAnimate);\r\n    }\r\n    return toAnimate;\r\n}\r\n\r\n//old gnome sort(unoptimized)\r\n/*\r\nexport function gnomeSortAlg(array) {\r\n    var arr = array.slice();\r\n    var toAnimate = [];\r\n    var i = 0;\r\n    while(i < arr.length) {\r\n        if(i === 0 || arr[i] >= arr[i-1]) {\r\n            var animation = {toCompareFirst: i, toCompareSecond: i, toSwap: false};\r\n            i = i + 1;\r\n        }\r\n        else {\r\n            var animation = {toCompareFirst: i, toCompareSecond: i-1, toSwap: true};\r\n            const tmp = arr[i];\r\n            arr[i] = arr[i-1];\r\n            arr[i-1] = tmp;\r\n            i = i - 1;\r\n        }\r\n        toAnimate.push(animation);\r\n    }\r\n    return toAnimate;\r\n}*/","function quickSortPartition(array, left, right, toAnimate) {\r\n    var pivotIndex = Math.floor((right + left)/2);\r\n    var pivot = array[pivotIndex];\r\n    var i = left;\r\n    var j = right;\r\n    while(i <= j) {\r\n        var animation = {toCompareFirst: i, toCompareSecond: pivotIndex, toSwap: false};\r\n        toAnimate.push(animation);\r\n        while(array[i] < pivot) {\r\n            i++;\r\n            animation = {toCompareFirst: i, toCompareSecond: pivotIndex, toSwap: false};\r\n            toAnimate.push(animation);\r\n        }\r\n        animation = {toCompareFirst: j, toCompareSecond: pivotIndex, toSwap: false};\r\n        toAnimate.push(animation);\r\n        while(array[j] > pivot) {\r\n            j--;\r\n            animation = {toCompareFirst: j, toCompareSecond: pivotIndex, toSwap: false};\r\n            toAnimate.push(animation);\r\n        }\r\n        if(i <= j) {\r\n            animation = {toCompareFirst: i, toCompareSecond: j, toSwap: true};\r\n            toAnimate.push(animation);\r\n            let tmp = array[i];\r\n            array[i] = array[j];\r\n            array[j] = tmp;\r\n\r\n            i++;\r\n            j--;\r\n        }\r\n    }\r\n    return i;\r\n}\r\n\r\nfunction quickSortMain(array, left, right, toAnimate) {\r\n    var index;\r\n    if(array.length > 1) {\r\n        index = quickSortPartition(array, left, right, toAnimate);\r\n        if(left < index - 1) {\r\n            quickSortMain(array, left, index - 1, toAnimate);\r\n        }\r\n        if(index < right) {\r\n            quickSortMain(array, index, right, toAnimate);\r\n        }\r\n    }\r\n}\r\n\r\nexport default function quickSortAlg(array) {\r\n    var arr = array.slice();\r\n    var toAnimate = [];\r\n    quickSortMain(arr, 0, arr.length-1, toAnimate);\r\n    return toAnimate;\r\n}","import swap from './helpers/swap';\r\n\r\nfunction heapify(array, size, i, toAnimate) {\r\n    var largest = i;\r\n    var left = 2*i + 1;\r\n    var right = 2*i +2;\r\n\r\n    if(left < size) {\r\n        var animation = {toCompareFirst: left, toCompareSecond: largest, toSwap: false}\r\n        toAnimate.push(animation);\r\n    }\r\n    if(left < size && array[left] > array[largest]) {\r\n        largest = left;\r\n    }\r\n\r\n    if(right < size) {\r\n        animation = {toCompareFirst: left, toCompareSecond: largest, toSwap: false}\r\n        toAnimate.push(animation);\r\n    }\r\n    if(right < size && array[right] > array[largest]) {\r\n        largest = right;\r\n    }\r\n    \r\n    animation = {toCompareFirst: largest, toCompareSecond: i, toSwap: false}\r\n    if(largest !== i) {\r\n        animation.toSwap = true;\r\n        toAnimate.push(animation);\r\n        swap(array, i, largest);\r\n\r\n        heapify(array, size, largest, toAnimate);\r\n    }\r\n}\r\n\r\nfunction heapSort(array, size, toAnimate) {\r\n    for(let i=Math.floor(size/2 - 1); i >= 0; i--) {\r\n        heapify(array, size, i, toAnimate);\r\n    }\r\n    for(let i=size-1;i>0;i--) {\r\n        var animation = {toCompareFirst: 0, toCompareSecond: i, toSwap: true};\r\n        toAnimate.push(animation);\r\n        swap(array, 0, i);\r\n\r\n        heapify(array, i, 0, toAnimate);\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default function heapSortAlg(array) {\r\n    var arr = array.slice();\r\n    var toAnimate = [];\r\n    heapSort(arr, arr.length, toAnimate);\r\n    return toAnimate;\r\n}","import swap from \"./helpers/swap\";\r\n\r\nfunction oddEvenSort(array, toAnimate) {\r\n    var sorted = false;\r\n    while(!sorted) {\r\n        sorted = true;\r\n        for(let i=1; i<array.length - 1; i+=2) {\r\n            if(array[i] > array[i+1]) {\r\n                var animation = {toCompareFirst: i, toCompareSecond: i+1, toSwap: true};\r\n                toAnimate.push(animation);\r\n                swap(array, i, i+1);\r\n                sorted = false;\r\n            }\r\n        }\r\n\r\n        for(let i=0; i<array.length-1; i+=2) {\r\n            if(array[i] > array[i+1]) {\r\n                animation = {toCompareFirst: i, toCompareSecond: i+1, toSwap: true};\r\n                toAnimate.push(animation);\r\n                swap(array, i, i+1);\r\n                sorted = false;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default function oddEvenSortAlg(array) {\r\n    var arr = array.slice();\r\n    var toAnimate = [];\r\n    oddEvenSort(arr, toAnimate);\r\n    return toAnimate;\r\n}","import React, { useState } from 'react';\nimport sortIcon from './images/sortIcon.svg';\nimport sortAlgMenu from './images/sortAlgMenu.svg';\nimport genNewArrIcon from './images/genNewArrIcon.svg';\n\nimport bubbleSortAlg from './sort-algorithms/bubble-sort';\nimport gnomeSortAlg from './sort-algorithms/gnome-sort';\nimport quickSortAlg from './sort-algorithms/quick-sort';\nimport mergeSortAlg from './sort-algorithms/merge-sort';\nimport heapSortAlg from './sort-algorithms/heap-sort';\nimport oddEvenSortAlg from './sort-algorithms/odd-even-sort';\n\nfunction randomArray(size) { //array of random numbers of size size\n  var array = [];\n  for(let i=0;i<size;i++) {\n    array.push(Math.floor(Math.random() * 300) + 10);\n  }\n\n  return array;\n}\n\nfunction App() {\n  //all states\n  const [sortAlg, setSortAlg] = useState('Gnome sort'); //sorting alg to be used\n\n  const [size, setSize] = useState(50); //size of array\n  const [array, setArray] = useState(randomArray(50)); //array that is to be sorted\n  const [sortSpeed, setSortSpeed] = useState(Math.floor(3000/size));\n\n  const [currSorting, setCurrSorting] = useState(false); //flag to disable the button during sorting\n  const [isSorted, setIsSorted] = useState(false);\n\n  const [hoveredSize, setHoveredSize] = useState(false); //true if dropdown menu for alg selection is hovered\n  const [hoveredAlg, setHoveredAlg] = useState(false); //true if dropdown menu for alg selection is hovered\n\n  const defaultBarColor = '#777777';\n  const compareBarColor = '#fff82b';\n  const correctBarColor = '#45ff54';\n\n  //animation function that receives an array of animations by one of the funcs in sorting-algs.js and animates the bars based on it\n  const animate = (animations) => {\n    const arrayBars = document.getElementsByClassName('arrayBar'); //get elements to change css for animations\n    for(let i=0;i<animations.length;i++) {\n      setTimeout(() => { //set them to red at start of comparison\n        arrayBars[animations[i].toCompareFirst].style.backgroundColor = compareBarColor;\n        arrayBars[animations[i].toCompareSecond].style.backgroundColor = compareBarColor;\n      }, (i+0.5)*sortSpeed);\n      if(animations[i].toSwap) { //if they are to be swapped\n        setTimeout(() => { //swap their heights\n          const tmp = arrayBars[animations[i].toCompareFirst].style.height;\n          arrayBars[animations[i].toCompareFirst].style.height = arrayBars[animations[i].toCompareSecond].style.height;\n          arrayBars[animations[i].toCompareSecond].style.height = tmp;\n        }, (i+1)*sortSpeed);\n        setTimeout(() => { //set colour to green to indicate that they are now in the correct position\n          arrayBars[animations[i].toCompareFirst].style.backgroundColor = correctBarColor;\n          arrayBars[animations[i].toCompareSecond].style.backgroundColor = correctBarColor;\n        }, (i+1)*sortSpeed);\n      } else { //if they are not to be swapped\n        setTimeout(() => { //only set colour to green\n          arrayBars[animations[i].toCompareFirst].style.backgroundColor = correctBarColor;\n          arrayBars[animations[i].toCompareSecond].style.backgroundColor = correctBarColor;\n        }, (i+1)*sortSpeed);\n      }\n      setTimeout(() => { //set them back to yellow\n          arrayBars[animations[i].toCompareFirst].style.backgroundColor = defaultBarColor;\n          arrayBars[animations[i].toCompareSecond].style.backgroundColor = defaultBarColor;\n      }, (i+2)*sortSpeed);\n    }\n    setTimeout(() => {\n      setCurrSorting(false);\n      setIsSorted(true);\n    }, animations.length*(sortSpeed)+20);\n  };\n\n  const handleSortPress = () => {\n    if(isSorted) {\n      alert(\"The array is sorted.\");\n    }\n    else {\n      setCurrSorting(true);\n      if(sortAlg===\"Bubble sort\") {\n        animate(bubbleSortAlg(array));\n      } else if(sortAlg===\"Heap sort\") {\n        animate(heapSortAlg(array));\n      } else if(sortAlg===\"Quick sort\") {\n        animate(quickSortAlg(array));\n      } else if(sortAlg===\"Gnome sort\") {\n        animate(gnomeSortAlg(array));\n      } else if(sortAlg===\"Odd-Even sort\") {\n        animate(oddEvenSortAlg(array));\n      }\n    }\n  }\n\n  const sliderSize = (event) => {\n    let sizeValue = event.target.value;\n\n    setIsSorted(false);\n\n    setSize(sizeValue);\n    setArray(randomArray(sizeValue));\n\n    setSortSpeed(Math.floor(3000/sizeValue));\n  }\n\n  const generateNewArray = () => {\n    setArray(randomArray(size));\n    setIsSorted(false);\n  }\n\n    return (\n    <div className=\"h-screen w-screen items-center\">\n      <div className=\"flex flex-row w-full justify-around select-none\" style={{ height: '8%', backgroundColor: currSorting ? '#CCCCCC' : '#FFFFFF', pointerEvents: currSorting ? 'none' : 'all' }} >\n\n        <a href=\"/\" className=\"w-48 font-bold text-xl self-center text-blue-500 hover:text-blue-700\">\n          {!isSorted && !currSorting && \"Sorting vizualizer\"}\n          {isSorted && \"Sorted\"}\n          {currSorting && \"Sorting...\"}\n        </a>\n        <div className=\"flex flex-row w-3/4 h-12 px-2 bg-blue-100 self-center items-center justify-around shadow-lg rounded-full\">\n          <div onMouseEnter={() => setHoveredSize(true)} onMouseLeave={() => setHoveredSize(false)} className=\"cursor-pointer\">\n            <div className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-1 rounded-lg select-none w-24 text-center\" >Size: {size}</div>\n              {hoveredSize && \n              <div className=\"flex absolute px-2 py-4 items-center bg-white rounded-lg\">\n                <input\n                  type=\"range\"\n                  onChange={sliderSize}\n                  min={5}\n                  max={250}\n                  value={size}\n                />\n              </div>\n              }\n          </div>\n          <div onMouseEnter={() => setHoveredAlg(true)} onMouseLeave={() => setHoveredAlg(false)} className=\"py-1 px-4 rounded-lg bg-blue-500 hover:bg-blue-700 font-bold text-white cursor-pointer\">\n            <div className=\"flex flex-row\">\n              <img src={sortAlgMenu} alt=\"\" />\n              <p className=\"ml-1\">{sortAlg}</p>\n            </div>\n            {hoveredAlg &&\n              <div className=\"absolute flex flex-col text-black bg-white cursor-pointer py-2 px-2 mt-1 rounded-lg\" onClick={() => {setHoveredAlg(false)}}>\n                <div onClick={() => {setSortAlg('Bubble sort')}} className=\"hover:underline\">Bubble sort</div>\n                <div onClick={() => {setSortAlg('Heap sort')}} className=\"hover:underline\">Heap sort</div>\n                <div onClick={() => {setSortAlg('Quick sort')}} className=\"hover:underline\">Quick sort</div>\n                <div onClick={() => {setSortAlg('Gnome sort')}} className=\"hover:underline\">Gnome sort</div>\n                <div onClick={() => {setSortAlg('Odd-Even sort')}} className=\"hover:underline\">Odd-Even sort</div>\n              </div>}\n          </div>\n          <button onClick={() => handleSortPress()} className=\"flex flex-row bg-blue-500 hover:bg-blue-700 text-white font-bold py-1 px-4 rounded-lg\" > \n            <img src={sortIcon} alt=\"\" />\n            <p className=\"ml-1 select-none\">Sort</p>\n          </button>\n        </div>\n      </div>\n      <div className=\"w-full bg-blue-200\" style={{ height: '92%' }}>\n        <div className=\"flex flex-row justify-evenly\" >\n            {array.map((number, index) => <div key={index} className=\"arrayBar\" style={{\n                                            height: `${number/4}vh`,\n                                            width: `${1000/size}px`,\n                                            backgroundColor: defaultBarColor,\n                                          }}\n                                          />\n                      )\n            }\n        </div>\n        <div className=\"absolute left-0 bottom-0 pt-4 pr-4 rounded-t-lg\" style={{ backgroundColor: currSorting ? '#CCCCCC' : '#FFFFFF', pointerEvents: currSorting ? 'none' : 'all' }}>\n          <button onClick={() => generateNewArray()} className=\"flex flex-row bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 ml-4 mb-4 rounded-lg\" > \n            <img src={genNewArrIcon} alt=\"\" />\n            <p className=\"ml-1 select-none\">Generate New Array</p>\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;","import swap from './helpers/swap';\r\n\r\nexport default function bubbleSortAlg(array) {\r\n    var arr = array.slice();\r\n    var toAnimate = [];\r\n    for(let i=0;i<arr.length-1;i++) {\r\n        for(let j=0;j<arr.length-i-1;j++) {\r\n            var animation = {toCompareFirst: j, toCompareSecond: j+1, toSwap: false}\r\n            if(arr[j] > arr[j+1]) {\r\n                swap(arr, j, j+1);\r\n                animation.toSwap = true;\r\n            }\r\n            toAnimate.push(animation);\r\n        }\r\n    }\r\n\r\n    return toAnimate;\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './styles/tailwind.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}